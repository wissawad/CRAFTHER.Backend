---

## CRAFTHER (คราฟท์เถอะ!) - Product Requirements (เฟส 1)

---

### **1. ภาพรวม (Overview)**

CRAFTHER เป็นเว็บแอปพลิเคชัน (SaaS) สำหรับบริหารจัดการ Bill of Materials (BOM) และ Inventory (สต็อกวัตถุดิบ) สำหรับ SME ที่มีการผลิตหรือประกอบสินค้า โดยมีจุดเด่นที่ Gamification และการรองรับการแปลงหน่วยที่ซับซ้อน **เป้าหมายเฟส 1 คือการสร้าง Core Functionality ให้สมบูรณ์และใช้งานได้จริง (MVP)**

---

### **2. กลุ่มเป้าหมาย (Target Users)**

Small to Medium Enterprises (SMEs) ที่มีการผลิตหรือประกอบสินค้า เช่น ร้านอาหาร, คาเฟ่, ร้านเบเกอรี่, ธุรกิจผลิตเสื้อผ้า, งานฝีมือ

---

### **3. Functional Requirements (สิ่งที่ระบบต้องทำได้)**

#### **3.1 ระบบจัดการผู้ใช้งานและองค์กร (User & Organization Management)**

* ผู้ใช้สามารถลงทะเบียน/เข้าสู่ระบบ (User Authentication & Authorization) ได้
* ระบบต้องรองรับการแยกข้อมูล (Data Isolation) ตามองค์กร (Organization-based)
* ผู้ใช้สามารถจัดการโปรไฟล์ส่วนตัวได้

#### **3.2 ระบบจัดการวัตถุดิบ (Component Management)**

* สามารถเพิ่ม, แก้ไข, ลบข้อมูลวัตถุดิบ (Component) ได้
* วัตถุดิบแต่ละรายการต้องมี: ชื่อ, รหัส (Code), ราคาต่อหน่วย (Cost per Unit), รูปภาพ
* **สำคัญ:** วัตถุดิบแต่ละรายการต้องสามารถระบุ **`ItemCategory`** (หรือ `MaterialType`) ได้ เพื่อรองรับธุรกิจหลากหลายประเภท (เช่น อาหาร, ผ้า, สารเคมี)

#### **3.3 ระบบจัดการสินค้า (Product Management)**

* สามารถเพิ่ม, แก้ไข, ลบข้อมูลสินค้าสำเร็จรูป (Product) ได้
* สินค้าแต่ละรายการต้องมี: ชื่อ, รหัส (Code), รูปภาพ, และสามารถระบุ **`ItemCategory`** (เช่น อาหารจานหลัก, เสื้อยืด, สบู่) ได้

#### **3.4 ระบบจัดการหน่วยนับและการแปลงหน่วย (Unit of Measure & Conversion Management)**

* สามารถเพิ่ม, แก้ไข, ลบหน่วยนับ (Unit of Measure - UOM) ได้ (เช่น กรัม, กิโลกรัม, ชิ้น, มิลลิลิตร, ลิตร, หลอดยา, หลา)
* **สำคัญมาก:** ระบบต้องสามารถจัดการอัตราการแปลงหน่วย (Unit Conversion) ที่ซับซ้อนได้
    * รองรับการแปลงหน่วยมาตรฐาน (Standard Conversion) เช่น 1 kg = 1000 g
    * รองรับการแปลงหน่วยเฉพาะวัตถุดิบ (Component-Specific Conversion) เช่น กาแฟ 1 ถุง = 1500 g, กาแฟ 15 g = 1 Espresso Shot
    * **Logic:** เมื่อมีการแปลงหน่วย ระบบต้องคำนวณได้อย่างถูกต้องและแม่นยำ

#### **3.5 ระบบจัดการสต็อก (Inventory Management)**

* **Stock Adjustment:** สามารถบันทึกการปรับปรุงสต็อกได้ (รับเข้า/เบิกออก)
    * เมื่อมีการปรับปรุง ระบบต้องอัปเดต `CurrentStockQuantity` แบบ Real-time
    * รองรับ Logic การแปลงหน่วยอัตโนมัติในการปรับปรุงสต็อก (เช่น รับเข้า 1 ถุงกาแฟ ระบบต้องรู้ว่าเท่ากับ 1500 g และอัปเดตสต็อก g)
* สามารถดึงยอดสต็อกปัจจุบันของวัตถุดิบแต่ละรายการได้

#### **3.6 ระบบจัดการสูตรการผลิต (Bill of Materials - BOM Management)**

* สามารถสร้าง, แก้ไข, ลบสูตรการผลิต (BOM) ได้
* แต่ละสูตรต้องสามารถกำหนดวัตถุดิบ (Component) และปริมาณที่ใช้ในแต่ละเมนู/ชิ้นงาน
* **Logic การตรวจสอบ:** เมื่อเพิ่มวัตถุดิบในสูตร ระบบต้องตรวจสอบว่า `ItemCategory` ของวัตถุดิบนั้น **"เข้ากันได้"** กับ `ItemCategory` ของสินค้าสำเร็จรูปที่สูตรนั้นใช้ (เช่น สูตรอาหารไม่ควรมีผ้าเป็นส่วนผสม) หรือมีกลไกเตือน/ป้องกัน

#### **3.7 ระบบจัดการคำสั่งผลิต (Production Order Management)**

* สามารถสร้าง, แก้ไข, ลบคำสั่งผลิตได้
* คำสั่งผลิตต้องเชื่อมโยงกับ BOM (สูตร)
* **Logic การตัดสต็อกอัตโนมัติ:** เมื่อมีการบันทึกการผลิต (Production Completion) ระบบต้องหักสต็อกวัตถุดิบที่ใช้ตามสูตร BOM โดยอัตโนมัติ

#### **3.8 รายงานและวิเคราะห์เบื้องต้น (Basic Reporting & Analytics)**

* รายงานยอดสต็อกปัจจุบัน
* รายงานประวัติการเคลื่อนไหวสต็อก (Stock Movement History)
* แจ้งเตือนสต็อกใกล้หมด (Low Stock Alert)

#### **3.9 User Interface (UI) และ User Experience (UX)**

* **ใช้งานง่าย (Simple):** ออกแบบ UI/UX ให้ใช้งานง่าย ไม่ซับซ้อน
* **สนุก (Fun):** มีองค์ประกอบของ Gamification (เช่น การแสดงแต้ม, Badge ที่ได้รับ, หรือ Challenge ง่ายๆ) เพื่อกระตุ้นการใช้งาน

---

### **4. Non-Functional Requirements (สิ่งที่ระบบต้องมีคุณสมบัติ)**

* **ประสิทธิภาพ (Performance):** ระบบควรตอบสนองได้อย่างรวดเร็ว ไม่มีการหน่วงขณะใช้งานพื้นฐาน
* **ความน่าเชื่อถือ (Reliability):** ระบบควรทำงานได้เสถียร มี Uptime สูงสุด
* **ความสามารถในการขยายขนาด (Scalability):** สถาปัตยกรรม (API-first, Database) ต้องรองรับการเพิ่มจำนวนผู้ใช้งานและข้อมูลในอนาคต
* **ความปลอดภัย (Security):**
    * User Authentication & Authorization (JWT)
    * Data Isolation ระหว่างองค์กรต้องรัดกุม
    * ป้องกันการเข้าถึงข้อมูลโดยไม่ได้รับอนุญาต
* **ความสามารถในการบำรุงรักษา (Maintainability):** Codebase ต้องสะอาด, มีโครงสร้างที่ดี, และง่ายต่อการแก้ไข/เพิ่มฟีเจอร์ในอนาคต (ควรมี Unit Tests)
* **Technology Stack:** Backend เป็น C#, Database เป็น SQL Server

---

### **5. Roadmap สำหรับเฟสถัดไป (Future Phases - สำหรับรับทราบ)**

* **Marketplace สูตร:** ผู้ใช้สามารถซื้อ/ขายสูตรกันได้
* **In-App Currency:** สกุลเงินเสมือนสำหรับใช้ในแอปและ Marketplace
* **Integration:** เชื่อมต่อกับ OCR ใบเสร็จและระบบ POS

---

### **6. การสื่อสารและการทำงานร่วมกัน**

* ทีม Dev ควรมีการประชุม Daily Stand-up สั้นๆ เพื่ออัปเดตความคืบหน้าและปัญหา
* ใช้เครื่องมือ Project Management (เช่น Jira, Trello) เพื่อติดตาม Task และ Bug
* มีการสื่อสารที่ชัดเจนระหว่าง Product Owner/Business Analyst และ Developer

---