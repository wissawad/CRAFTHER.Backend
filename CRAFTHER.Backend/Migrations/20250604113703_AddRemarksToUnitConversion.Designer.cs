// <auto-generated />
using System;
using CRAFTHER.Backend.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CRAFTHER.Backend.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250604113703_AddRemarksToUnitConversion")]
    partial class AddRemarksToUnitConversion
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CRAFTHER.Backend.Models.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("c1a2b3d4-e5f6-7890-1234-567890abcdef"),
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("d5e6f7a8-b9c0-1234-5678-90abcdef1234"),
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("CRAFTHER.Backend.Models.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserDisplayName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("CRAFTHER.Backend.Models.BOMItem", b =>
                {
                    b.Property<Guid>("BOMItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ComponentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ComponentType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ParentProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<string>("Remarks")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UsageUnitId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BOMItemId");

                    b.HasIndex("ComponentId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UsageUnitId");

                    b.HasIndex("ParentProductId", "ComponentId", "ProductId")
                        .IsUnique()
                        .HasFilter("[ComponentId] IS NOT NULL AND [ProductId] IS NOT NULL");

                    b.ToTable("BOMItems");
                });

            modelBuilder.Entity("CRAFTHER.Backend.Models.Component", b =>
                {
                    b.Property<Guid>("ComponentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ComponentCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ComponentName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("CurrentStockQuantity")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid>("InventoryUnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("MinimumStockLevel")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("PurchaseToInventoryConversionFactor")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<Guid>("PurchaseUnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ComponentId");

                    b.HasIndex("InventoryUnitId");

                    b.HasIndex("PurchaseUnitId");

                    b.HasIndex("OrganizationId", "ComponentCode")
                        .IsUnique();

                    b.ToTable("Components");
                });

            modelBuilder.Entity("CRAFTHER.Backend.Models.Level", b =>
                {
                    b.Property<Guid>("LevelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BadgeImageUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("LevelName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("LevelNumber")
                        .HasColumnType("int");

                    b.Property<int>("RequiredPoints")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("LevelId");

                    b.ToTable("Levels");

                    b.HasData(
                        new
                        {
                            LevelId = new Guid("e1f2a3b4-c5d6-e7f8-a9b0-c1d2e3f4a5b6"),
                            CreatedAt = new DateTime(2025, 6, 4, 11, 37, 1, 736, DateTimeKind.Utc).AddTicks(4867),
                            Description = "Just starting your BOM journey.",
                            LevelName = "BOM Novice",
                            LevelNumber = 1,
                            RequiredPoints = 0,
                            UpdatedAt = new DateTime(2025, 6, 4, 11, 37, 1, 736, DateTimeKind.Utc).AddTicks(4868)
                        },
                        new
                        {
                            LevelId = new Guid("f2a3b4c5-d6e7-f8a9-b0c1-d2e3f4a5b6c7"),
                            CreatedAt = new DateTime(2025, 6, 4, 11, 37, 1, 736, DateTimeKind.Utc).AddTicks(4874),
                            Description = "Learning the ropes of recipe management.",
                            LevelName = "Recipe Apprentice",
                            LevelNumber = 2,
                            RequiredPoints = 100,
                            UpdatedAt = new DateTime(2025, 6, 4, 11, 37, 1, 736, DateTimeKind.Utc).AddTicks(4874)
                        },
                        new
                        {
                            LevelId = new Guid("a0b1c2d3-e4f5-a6b7-c8d9-e0f1a2b3c4d5"),
                            CreatedAt = new DateTime(2025, 6, 4, 11, 37, 1, 736, DateTimeKind.Utc).AddTicks(4881),
                            Description = "Mastering your ingredient knowledge.",
                            LevelName = "Ingredient Explorer",
                            LevelNumber = 3,
                            RequiredPoints = 300,
                            UpdatedAt = new DateTime(2025, 6, 4, 11, 37, 1, 736, DateTimeKind.Utc).AddTicks(4881)
                        },
                        new
                        {
                            LevelId = new Guid("b1c2d3e4-f5a6-b7c8-d9e0-f1a2b3c4d5e6"),
                            CreatedAt = new DateTime(2025, 6, 4, 11, 37, 1, 736, DateTimeKind.Utc).AddTicks(4884),
                            Description = "Becoming an expert in cost analysis.",
                            LevelName = "Costing Pro",
                            LevelNumber = 4,
                            RequiredPoints = 600,
                            UpdatedAt = new DateTime(2025, 6, 4, 11, 37, 1, 736, DateTimeKind.Utc).AddTicks(4885)
                        },
                        new
                        {
                            LevelId = new Guid("c2d3e4f5-a6b7-c8d9-e0f1-a2b3c4d5e6f7"),
                            CreatedAt = new DateTime(2025, 6, 4, 11, 37, 1, 736, DateTimeKind.Utc).AddTicks(4888),
                            Description = "The ultimate CRAFTHER champion!",
                            LevelName = "CRAFTHER Master",
                            LevelNumber = 5,
                            RequiredPoints = 1000,
                            UpdatedAt = new DateTime(2025, 6, 4, 11, 37, 1, 736, DateTimeKind.Utc).AddTicks(4888)
                        });
                });

            modelBuilder.Entity("CRAFTHER.Backend.Models.Organization", b =>
                {
                    b.Property<Guid>("OrganizationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("IndustryTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OrganizationName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("PlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Website")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("OrganizationId");

                    b.HasIndex("IndustryTypeId");

                    b.HasIndex("PlanId");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("CRAFTHER.Backend.Models.OrganizationIndustryType", b =>
                {
                    b.Property<Guid>("IndustryTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("IndustryTypeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("IndustryTypeId");

                    b.ToTable("OrganizationIndustryTypes");

                    b.HasData(
                        new
                        {
                            IndustryTypeId = new Guid("a1b2c3d4-e5f6-7890-1234-567890abcdef"),
                            CreatedAt = new DateTime(2025, 6, 4, 11, 37, 1, 736, DateTimeKind.Utc).AddTicks(4635),
                            Description = "Businesses primarily focused on coffee, tea, and light snacks.",
                            IndustryTypeName = "Cafe / Coffee Shop",
                            UpdatedAt = new DateTime(2025, 6, 4, 11, 37, 1, 736, DateTimeKind.Utc).AddTicks(4638)
                        },
                        new
                        {
                            IndustryTypeId = new Guid("b2c3d4e5-f6a1-2345-6789-0abcdef12345"),
                            CreatedAt = new DateTime(2025, 6, 4, 11, 37, 1, 736, DateTimeKind.Utc).AddTicks(4642),
                            Description = "Businesses specializing in baked goods, pastries, and sweets.",
                            IndustryTypeName = "Bakery / Confectionery",
                            UpdatedAt = new DateTime(2025, 6, 4, 11, 37, 1, 736, DateTimeKind.Utc).AddTicks(4643)
                        },
                        new
                        {
                            IndustryTypeId = new Guid("c3d4e5f6-a1b2-3456-7890-cdef12345678"),
                            CreatedAt = new DateTime(2025, 6, 4, 11, 37, 1, 736, DateTimeKind.Utc).AddTicks(4647),
                            Description = "Businesses serving prepared meals and beverages.",
                            IndustryTypeName = "Restaurant / Eatery",
                            UpdatedAt = new DateTime(2025, 6, 4, 11, 37, 1, 736, DateTimeKind.Utc).AddTicks(4647)
                        },
                        new
                        {
                            IndustryTypeId = new Guid("d4e5f6a1-b2c3-4567-890a-bcdef1234567"),
                            CreatedAt = new DateTime(2025, 6, 4, 11, 37, 1, 736, DateTimeKind.Utc).AddTicks(4652),
                            Description = "Businesses producing and selling handmade products.",
                            IndustryTypeName = "Crafts / Handmade Goods",
                            UpdatedAt = new DateTime(2025, 6, 4, 11, 37, 1, 736, DateTimeKind.Utc).AddTicks(4652)
                        });
                });

            modelBuilder.Entity("CRAFTHER.Backend.Models.Product", b =>
                {
                    b.Property<Guid>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("CalculatedCost")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("CurrentStockQuantity")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsSubProduct")
                        .HasColumnType("bit");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProductCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("ProductUnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("ProductUnitToSaleUnitConversionFactor")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<Guid?>("SaleUnitId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("SellingPrice")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ProductId");

                    b.HasIndex("ProductUnitId");

                    b.HasIndex("SaleUnitId");

                    b.HasIndex("OrganizationId", "ProductCode")
                        .IsUnique();

                    b.ToTable("Products");
                });

            modelBuilder.Entity("CRAFTHER.Backend.Models.Quest", b =>
                {
                    b.Property<Guid>("QuestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsRepeatable")
                        .HasColumnType("bit");

                    b.Property<Guid?>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("QuestTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RequiredProgress")
                        .HasColumnType("int");

                    b.Property<int>("RewardPoints")
                        .HasColumnType("int");

                    b.Property<string>("TargetFeature")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("QuestId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("QuestTypeId");

                    b.ToTable("Quests");
                });

            modelBuilder.Entity("CRAFTHER.Backend.Models.QuestType", b =>
                {
                    b.Property<Guid>("QuestTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("QuestTypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("QuestTypeId");

                    b.ToTable("QuestTypes");

                    b.HasData(
                        new
                        {
                            QuestTypeId = new Guid("a1b2c3d4-e5f6-7890-abcd-ef0123456789"),
                            CreatedAt = new DateTime(2025, 6, 4, 11, 37, 1, 736, DateTimeKind.Utc).AddTicks(4814),
                            Description = "Quests that refresh daily.",
                            QuestTypeName = "DAILY",
                            UpdatedAt = new DateTime(2025, 6, 4, 11, 37, 1, 736, DateTimeKind.Utc).AddTicks(4815)
                        },
                        new
                        {
                            QuestTypeId = new Guid("b2c3d4e5-f6a1-2345-cdef-0123456789ab"),
                            CreatedAt = new DateTime(2025, 6, 4, 11, 37, 1, 736, DateTimeKind.Utc).AddTicks(4819),
                            Description = "Quests that refresh weekly.",
                            QuestTypeName = "WEEKLY",
                            UpdatedAt = new DateTime(2025, 6, 4, 11, 37, 1, 736, DateTimeKind.Utc).AddTicks(4819)
                        },
                        new
                        {
                            QuestTypeId = new Guid("c3d4e5f6-a1b2-3456-7890-abcdef012345"),
                            CreatedAt = new DateTime(2025, 6, 4, 11, 37, 1, 736, DateTimeKind.Utc).AddTicks(4821),
                            Description = "Core progression quests.",
                            QuestTypeName = "MAIN_STORY",
                            UpdatedAt = new DateTime(2025, 6, 4, 11, 37, 1, 736, DateTimeKind.Utc).AddTicks(4822)
                        },
                        new
                        {
                            QuestTypeId = new Guid("d4e5f6a1-b2c3-4567-890a-bcdef0123456"),
                            CreatedAt = new DateTime(2025, 6, 4, 11, 37, 1, 736, DateTimeKind.Utc).AddTicks(4824),
                            Description = "Difficult, one-time challenges.",
                            QuestTypeName = "CHALLENGE",
                            UpdatedAt = new DateTime(2025, 6, 4, 11, 37, 1, 736, DateTimeKind.Utc).AddTicks(4824)
                        });
                });

            modelBuilder.Entity("CRAFTHER.Backend.Models.StockAdjustment", b =>
                {
                    b.Property<Guid>("AdjustmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AdjustmentDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("AdjustmentTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ComponentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal>("QuantityAfterAdjustment")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal>("QuantityBeforeAdjustment")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<Guid>("UnitOfMeasureId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("AdjustmentId");

                    b.HasIndex("AdjustmentTypeId");

                    b.HasIndex("ComponentId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("UnitOfMeasureId");

                    b.ToTable("StockAdjustments");
                });

            modelBuilder.Entity("CRAFTHER.Backend.Models.StockAdjustmentType", b =>
                {
                    b.Property<Guid>("AdjustmentTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Effect")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("AdjustmentTypeId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("StockAdjustmentTypes");

                    b.HasData(
                        new
                        {
                            AdjustmentTypeId = new Guid("01a1b2c3-d4e5-6f78-9012-3456789abc01"),
                            CreatedAt = new DateTime(2025, 6, 4, 11, 37, 1, 730, DateTimeKind.Utc).AddTicks(9294),
                            Effect = "Increase",
                            Name = "Receive",
                            UpdatedAt = new DateTime(2025, 6, 4, 11, 37, 1, 730, DateTimeKind.Utc).AddTicks(9295)
                        },
                        new
                        {
                            AdjustmentTypeId = new Guid("02a1b2c3-d4e5-6f78-9012-3456789abc02"),
                            CreatedAt = new DateTime(2025, 6, 4, 11, 37, 1, 730, DateTimeKind.Utc).AddTicks(9299),
                            Effect = "Decrease",
                            Name = "Issue",
                            UpdatedAt = new DateTime(2025, 6, 4, 11, 37, 1, 730, DateTimeKind.Utc).AddTicks(9299)
                        },
                        new
                        {
                            AdjustmentTypeId = new Guid("03a1b2c3-d4e5-6f78-9012-3456789abc03"),
                            CreatedAt = new DateTime(2025, 6, 4, 11, 37, 1, 730, DateTimeKind.Utc).AddTicks(9302),
                            Effect = "Increase",
                            Name = "Positive Adjustment",
                            UpdatedAt = new DateTime(2025, 6, 4, 11, 37, 1, 730, DateTimeKind.Utc).AddTicks(9303)
                        },
                        new
                        {
                            AdjustmentTypeId = new Guid("04a1b2c3-d4e5-6f78-9012-3456789abc04"),
                            CreatedAt = new DateTime(2025, 6, 4, 11, 37, 1, 730, DateTimeKind.Utc).AddTicks(9315),
                            Effect = "Decrease",
                            Name = "Negative Adjustment",
                            UpdatedAt = new DateTime(2025, 6, 4, 11, 37, 1, 730, DateTimeKind.Utc).AddTicks(9315)
                        },
                        new
                        {
                            AdjustmentTypeId = new Guid("05a1b2c3-d4e5-6f78-9012-3456789abc05"),
                            CreatedAt = new DateTime(2025, 6, 4, 11, 37, 1, 730, DateTimeKind.Utc).AddTicks(9318),
                            Effect = "Increase",
                            Name = "Production In",
                            UpdatedAt = new DateTime(2025, 6, 4, 11, 37, 1, 730, DateTimeKind.Utc).AddTicks(9319)
                        },
                        new
                        {
                            AdjustmentTypeId = new Guid("06a1b2c3-d4e5-6f78-9012-3456789abc06"),
                            CreatedAt = new DateTime(2025, 6, 4, 11, 37, 1, 730, DateTimeKind.Utc).AddTicks(9322),
                            Effect = "Decrease",
                            Name = "Consumption",
                            UpdatedAt = new DateTime(2025, 6, 4, 11, 37, 1, 730, DateTimeKind.Utc).AddTicks(9322)
                        });
                });

            modelBuilder.Entity("CRAFTHER.Backend.Models.SubscriptionPlan", b =>
                {
                    b.Property<Guid>("PlanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("CanAccessAdvancedReports")
                        .HasColumnType("bit");

                    b.Property<bool>("CanIntegratePOS")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("MaxComponents")
                        .HasColumnType("int");

                    b.Property<int?>("MaxProducts")
                        .HasColumnType("int");

                    b.Property<int?>("MaxUsers")
                        .HasColumnType("int");

                    b.Property<string>("PlanName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("StorageSpaceMB")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("PlanId");

                    b.ToTable("SubscriptionPlans");

                    b.HasData(
                        new
                        {
                            PlanId = new Guid("11223344-5566-7788-99aa-bbccddeeff00"),
                            CanAccessAdvancedReports = false,
                            CanIntegratePOS = false,
                            CreatedAt = new DateTime(2025, 6, 4, 11, 37, 1, 736, DateTimeKind.Utc).AddTicks(4744),
                            Description = "Basic features for small businesses to get started.",
                            MaxComponents = 20,
                            MaxProducts = 5,
                            MaxUsers = 1,
                            PlanName = "Free",
                            Price = 0.00m,
                            StorageSpaceMB = 50,
                            UpdatedAt = new DateTime(2025, 6, 4, 11, 37, 1, 736, DateTimeKind.Utc).AddTicks(4745)
                        },
                        new
                        {
                            PlanId = new Guid("aabbccdd-eeff-1122-3344-5566778899aa"),
                            CanAccessAdvancedReports = true,
                            CanIntegratePOS = false,
                            CreatedAt = new DateTime(2025, 6, 4, 11, 37, 1, 736, DateTimeKind.Utc).AddTicks(4766),
                            Description = "Essential tools for growing businesses.",
                            MaxComponents = 200,
                            MaxProducts = 50,
                            MaxUsers = 3,
                            PlanName = "Basic",
                            Price = 199.00m,
                            StorageSpaceMB = 500,
                            UpdatedAt = new DateTime(2025, 6, 4, 11, 37, 1, 736, DateTimeKind.Utc).AddTicks(4767)
                        },
                        new
                        {
                            PlanId = new Guid("ccddeeff-aabb-3344-5566-778899aabbcc"),
                            CanAccessAdvancedReports = true,
                            CanIntegratePOS = true,
                            CreatedAt = new DateTime(2025, 6, 4, 11, 37, 1, 736, DateTimeKind.Utc).AddTicks(4771),
                            Description = "Advanced features for established businesses.",
                            MaxComponents = 0,
                            MaxProducts = 0,
                            MaxUsers = 0,
                            PlanName = "Pro",
                            Price = 499.00m,
                            StorageSpaceMB = 5000,
                            UpdatedAt = new DateTime(2025, 6, 4, 11, 37, 1, 736, DateTimeKind.Utc).AddTicks(4771)
                        });
                });

            modelBuilder.Entity("CRAFTHER.Backend.Models.UnitConversion", b =>
                {
                    b.Property<Guid>("ConversionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("ConversionFactor")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("FromUnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Remarks")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("ToUnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ConversionId");

                    b.HasIndex("FromUnitId");

                    b.HasIndex("ToUnitId");

                    b.HasIndex("OrganizationId", "FromUnitId", "ToUnitId")
                        .IsUnique();

                    b.ToTable("UnitConversions");
                });

            modelBuilder.Entity("CRAFTHER.Backend.Models.UnitGroup", b =>
                {
                    b.Property<Guid>("UnitGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("UnitGroupName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("UnitGroupId");

                    b.HasIndex("UnitGroupName")
                        .IsUnique();

                    b.ToTable("UnitGroups");

                    b.HasData(
                        new
                        {
                            UnitGroupId = new Guid("a0000000-0000-0000-0000-000000000001"),
                            CreatedAt = new DateTime(2025, 6, 4, 11, 37, 1, 728, DateTimeKind.Utc).AddTicks(2514),
                            UnitGroupName = "Weight",
                            UpdatedAt = new DateTime(2025, 6, 4, 11, 37, 1, 728, DateTimeKind.Utc).AddTicks(2514)
                        },
                        new
                        {
                            UnitGroupId = new Guid("a0000000-0000-0000-0000-000000000002"),
                            CreatedAt = new DateTime(2025, 6, 4, 11, 37, 1, 728, DateTimeKind.Utc).AddTicks(2519),
                            UnitGroupName = "Volume",
                            UpdatedAt = new DateTime(2025, 6, 4, 11, 37, 1, 728, DateTimeKind.Utc).AddTicks(2519)
                        },
                        new
                        {
                            UnitGroupId = new Guid("a0000000-0000-0000-0000-000000000003"),
                            CreatedAt = new DateTime(2025, 6, 4, 11, 37, 1, 728, DateTimeKind.Utc).AddTicks(2522),
                            UnitGroupName = "Count",
                            UpdatedAt = new DateTime(2025, 6, 4, 11, 37, 1, 728, DateTimeKind.Utc).AddTicks(2523)
                        },
                        new
                        {
                            UnitGroupId = new Guid("a0000000-0000-0000-0000-000000000004"),
                            CreatedAt = new DateTime(2025, 6, 4, 11, 37, 1, 728, DateTimeKind.Utc).AddTicks(2526),
                            UnitGroupName = "Length",
                            UpdatedAt = new DateTime(2025, 6, 4, 11, 37, 1, 728, DateTimeKind.Utc).AddTicks(2526)
                        });
                });

            modelBuilder.Entity("CRAFTHER.Backend.Models.UnitOfMeasure", b =>
                {
                    b.Property<Guid>("UnitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<decimal>("ConversionFactorToBaseUnit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsBaseUnit")
                        .HasColumnType("bit");

                    b.Property<Guid>("UnitGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UnitName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("UnitId");

                    b.HasIndex("UnitGroupId", "Abbreviation")
                        .IsUnique();

                    b.HasIndex("UnitGroupId", "IsBaseUnit")
                        .IsUnique()
                        .HasFilter("[IsBaseUnit] = 1");

                    b.HasIndex("UnitGroupId", "UnitName")
                        .IsUnique();

                    b.ToTable("UnitsOfMeasures");

                    b.HasData(
                        new
                        {
                            UnitId = new Guid("b0000000-0000-0000-0000-000000000001"),
                            Abbreviation = "g",
                            ConversionFactorToBaseUnit = 1.0m,
                            CreatedAt = new DateTime(2025, 6, 4, 11, 37, 1, 728, DateTimeKind.Utc).AddTicks(8810),
                            IsBaseUnit = true,
                            UnitGroupId = new Guid("a0000000-0000-0000-0000-000000000001"),
                            UnitName = "Gram",
                            UpdatedAt = new DateTime(2025, 6, 4, 11, 37, 1, 728, DateTimeKind.Utc).AddTicks(8811)
                        },
                        new
                        {
                            UnitId = new Guid("b0000000-0000-0000-0000-000000000002"),
                            Abbreviation = "kg",
                            ConversionFactorToBaseUnit = 1000.0m,
                            CreatedAt = new DateTime(2025, 6, 4, 11, 37, 1, 728, DateTimeKind.Utc).AddTicks(8816),
                            IsBaseUnit = false,
                            UnitGroupId = new Guid("a0000000-0000-0000-0000-000000000001"),
                            UnitName = "Kilogram",
                            UpdatedAt = new DateTime(2025, 6, 4, 11, 37, 1, 728, DateTimeKind.Utc).AddTicks(8816)
                        },
                        new
                        {
                            UnitId = new Guid("b0000000-0000-0000-0000-000000000003"),
                            Abbreviation = "mg",
                            ConversionFactorToBaseUnit = 0.001m,
                            CreatedAt = new DateTime(2025, 6, 4, 11, 37, 1, 728, DateTimeKind.Utc).AddTicks(8830),
                            IsBaseUnit = false,
                            UnitGroupId = new Guid("a0000000-0000-0000-0000-000000000001"),
                            UnitName = "Milligram",
                            UpdatedAt = new DateTime(2025, 6, 4, 11, 37, 1, 728, DateTimeKind.Utc).AddTicks(8831)
                        },
                        new
                        {
                            UnitId = new Guid("b0000000-0000-0000-0000-000000000004"),
                            Abbreviation = "lb",
                            ConversionFactorToBaseUnit = 453.59237m,
                            CreatedAt = new DateTime(2025, 6, 4, 11, 37, 1, 728, DateTimeKind.Utc).AddTicks(8834),
                            IsBaseUnit = false,
                            UnitGroupId = new Guid("a0000000-0000-0000-0000-000000000001"),
                            UnitName = "Pound",
                            UpdatedAt = new DateTime(2025, 6, 4, 11, 37, 1, 728, DateTimeKind.Utc).AddTicks(8835)
                        },
                        new
                        {
                            UnitId = new Guid("b0000000-0000-0000-0000-000000000005"),
                            Abbreviation = "oz",
                            ConversionFactorToBaseUnit = 28.349523125m,
                            CreatedAt = new DateTime(2025, 6, 4, 11, 37, 1, 728, DateTimeKind.Utc).AddTicks(8840),
                            IsBaseUnit = false,
                            UnitGroupId = new Guid("a0000000-0000-0000-0000-000000000001"),
                            UnitName = "Ounce",
                            UpdatedAt = new DateTime(2025, 6, 4, 11, 37, 1, 728, DateTimeKind.Utc).AddTicks(8841)
                        },
                        new
                        {
                            UnitId = new Guid("b0000000-0000-0000-0000-000000000006"),
                            Abbreviation = "ml",
                            ConversionFactorToBaseUnit = 1.0m,
                            CreatedAt = new DateTime(2025, 6, 4, 11, 37, 1, 728, DateTimeKind.Utc).AddTicks(8845),
                            IsBaseUnit = true,
                            UnitGroupId = new Guid("a0000000-0000-0000-0000-000000000002"),
                            UnitName = "Milliliter",
                            UpdatedAt = new DateTime(2025, 6, 4, 11, 37, 1, 728, DateTimeKind.Utc).AddTicks(8845)
                        },
                        new
                        {
                            UnitId = new Guid("b0000000-0000-0000-0000-000000000007"),
                            Abbreviation = "l",
                            ConversionFactorToBaseUnit = 1000.0m,
                            CreatedAt = new DateTime(2025, 6, 4, 11, 37, 1, 728, DateTimeKind.Utc).AddTicks(8849),
                            IsBaseUnit = false,
                            UnitGroupId = new Guid("a0000000-0000-0000-0000-000000000002"),
                            UnitName = "Liter",
                            UpdatedAt = new DateTime(2025, 6, 4, 11, 37, 1, 728, DateTimeKind.Utc).AddTicks(8850)
                        },
                        new
                        {
                            UnitId = new Guid("b0000000-0000-0000-0000-000000000008"),
                            Abbreviation = "tsp",
                            ConversionFactorToBaseUnit = 4.92892m,
                            CreatedAt = new DateTime(2025, 6, 4, 11, 37, 1, 728, DateTimeKind.Utc).AddTicks(8853),
                            IsBaseUnit = false,
                            UnitGroupId = new Guid("a0000000-0000-0000-0000-000000000002"),
                            UnitName = "Teaspoon",
                            UpdatedAt = new DateTime(2025, 6, 4, 11, 37, 1, 728, DateTimeKind.Utc).AddTicks(8854)
                        },
                        new
                        {
                            UnitId = new Guid("b0000000-0000-0000-0000-000000000009"),
                            Abbreviation = "tbsp",
                            ConversionFactorToBaseUnit = 14.7868m,
                            CreatedAt = new DateTime(2025, 6, 4, 11, 37, 1, 728, DateTimeKind.Utc).AddTicks(8858),
                            IsBaseUnit = false,
                            UnitGroupId = new Guid("a0000000-0000-0000-0000-000000000002"),
                            UnitName = "Tablespoon",
                            UpdatedAt = new DateTime(2025, 6, 4, 11, 37, 1, 728, DateTimeKind.Utc).AddTicks(8858)
                        },
                        new
                        {
                            UnitId = new Guid("b0000000-0000-0000-0000-00000000000a"),
                            Abbreviation = "cup",
                            ConversionFactorToBaseUnit = 236.588m,
                            CreatedAt = new DateTime(2025, 6, 4, 11, 37, 1, 728, DateTimeKind.Utc).AddTicks(8862),
                            IsBaseUnit = false,
                            UnitGroupId = new Guid("a0000000-0000-0000-0000-000000000002"),
                            UnitName = "Cup",
                            UpdatedAt = new DateTime(2025, 6, 4, 11, 37, 1, 728, DateTimeKind.Utc).AddTicks(8862)
                        },
                        new
                        {
                            UnitId = new Guid("b0000000-0000-0000-0000-00000000000b"),
                            Abbreviation = "pcs",
                            ConversionFactorToBaseUnit = 1.0m,
                            CreatedAt = new DateTime(2025, 6, 4, 11, 37, 1, 728, DateTimeKind.Utc).AddTicks(8869),
                            IsBaseUnit = true,
                            UnitGroupId = new Guid("a0000000-0000-0000-0000-000000000003"),
                            UnitName = "Piece",
                            UpdatedAt = new DateTime(2025, 6, 4, 11, 37, 1, 728, DateTimeKind.Utc).AddTicks(8869)
                        },
                        new
                        {
                            UnitId = new Guid("b0000000-0000-0000-0000-00000000000c"),
                            Abbreviation = "dz",
                            ConversionFactorToBaseUnit = 12.0m,
                            CreatedAt = new DateTime(2025, 6, 4, 11, 37, 1, 728, DateTimeKind.Utc).AddTicks(8873),
                            IsBaseUnit = false,
                            UnitGroupId = new Guid("a0000000-0000-0000-0000-000000000003"),
                            UnitName = "Dozen",
                            UpdatedAt = new DateTime(2025, 6, 4, 11, 37, 1, 728, DateTimeKind.Utc).AddTicks(8874)
                        },
                        new
                        {
                            UnitId = new Guid("b0000000-0000-0000-0000-00000000000d"),
                            Abbreviation = "pr",
                            ConversionFactorToBaseUnit = 2.0m,
                            CreatedAt = new DateTime(2025, 6, 4, 11, 37, 1, 728, DateTimeKind.Utc).AddTicks(8877),
                            IsBaseUnit = false,
                            UnitGroupId = new Guid("a0000000-0000-0000-0000-000000000003"),
                            UnitName = "Pair",
                            UpdatedAt = new DateTime(2025, 6, 4, 11, 37, 1, 728, DateTimeKind.Utc).AddTicks(8878)
                        },
                        new
                        {
                            UnitId = new Guid("b0000000-0000-0000-0000-00000000000e"),
                            Abbreviation = "m",
                            ConversionFactorToBaseUnit = 1.0m,
                            CreatedAt = new DateTime(2025, 6, 4, 11, 37, 1, 728, DateTimeKind.Utc).AddTicks(8881),
                            IsBaseUnit = true,
                            UnitGroupId = new Guid("a0000000-0000-0000-0000-000000000004"),
                            UnitName = "Meter",
                            UpdatedAt = new DateTime(2025, 6, 4, 11, 37, 1, 728, DateTimeKind.Utc).AddTicks(8882)
                        },
                        new
                        {
                            UnitId = new Guid("b0000000-0000-0000-0000-00000000000f"),
                            Abbreviation = "cm",
                            ConversionFactorToBaseUnit = 0.01m,
                            CreatedAt = new DateTime(2025, 6, 4, 11, 37, 1, 728, DateTimeKind.Utc).AddTicks(8886),
                            IsBaseUnit = false,
                            UnitGroupId = new Guid("a0000000-0000-0000-0000-000000000004"),
                            UnitName = "Centimeter",
                            UpdatedAt = new DateTime(2025, 6, 4, 11, 37, 1, 728, DateTimeKind.Utc).AddTicks(8887)
                        });
                });

            modelBuilder.Entity("CRAFTHER.Backend.Models.UserQuest", b =>
                {
                    b.Property<Guid>("UserQuestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CurrentProgress")
                        .HasColumnType("int");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("QuestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserQuestId");

                    b.HasIndex("QuestId");

                    b.HasIndex("UserId");

                    b.ToTable("UserQuests");
                });

            modelBuilder.Entity("CRAFTHER.Backend.Models.UserScore", b =>
                {
                    b.Property<Guid>("UserScoreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CurrentLevel")
                        .HasColumnType("int");

                    b.Property<Guid?>("LevelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TotalPoints")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserScoreId");

                    b.HasIndex("LevelId");

                    b.HasIndex("UserId");

                    b.ToTable("UserScores");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("CRAFTHER.Backend.Models.ApplicationUser", b =>
                {
                    b.HasOne("CRAFTHER.Backend.Models.Organization", "Organization")
                        .WithMany("Users")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("CRAFTHER.Backend.Models.BOMItem", b =>
                {
                    b.HasOne("CRAFTHER.Backend.Models.Component", "Component")
                        .WithMany()
                        .HasForeignKey("ComponentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CRAFTHER.Backend.Models.Product", "ParentProduct")
                        .WithMany("BOMItems")
                        .HasForeignKey("ParentProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CRAFTHER.Backend.Models.Product", "SubProduct")
                        .WithMany("SubProductBOMItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CRAFTHER.Backend.Models.UnitOfMeasure", "UsageUnit")
                        .WithMany()
                        .HasForeignKey("UsageUnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Component");

                    b.Navigation("ParentProduct");

                    b.Navigation("SubProduct");

                    b.Navigation("UsageUnit");
                });

            modelBuilder.Entity("CRAFTHER.Backend.Models.Component", b =>
                {
                    b.HasOne("CRAFTHER.Backend.Models.UnitOfMeasure", "InventoryUnit")
                        .WithMany()
                        .HasForeignKey("InventoryUnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CRAFTHER.Backend.Models.Organization", "Organization")
                        .WithMany("Components")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CRAFTHER.Backend.Models.UnitOfMeasure", "PurchaseUnit")
                        .WithMany()
                        .HasForeignKey("PurchaseUnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("InventoryUnit");

                    b.Navigation("Organization");

                    b.Navigation("PurchaseUnit");
                });

            modelBuilder.Entity("CRAFTHER.Backend.Models.Organization", b =>
                {
                    b.HasOne("CRAFTHER.Backend.Models.OrganizationIndustryType", "IndustryType")
                        .WithMany()
                        .HasForeignKey("IndustryTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CRAFTHER.Backend.Models.SubscriptionPlan", "SubscriptionPlan")
                        .WithMany()
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IndustryType");

                    b.Navigation("SubscriptionPlan");
                });

            modelBuilder.Entity("CRAFTHER.Backend.Models.Product", b =>
                {
                    b.HasOne("CRAFTHER.Backend.Models.Organization", "Organization")
                        .WithMany("Products")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CRAFTHER.Backend.Models.UnitOfMeasure", "ProductUnit")
                        .WithMany()
                        .HasForeignKey("ProductUnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CRAFTHER.Backend.Models.UnitOfMeasure", "SaleUnit")
                        .WithMany()
                        .HasForeignKey("SaleUnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Organization");

                    b.Navigation("ProductUnit");

                    b.Navigation("SaleUnit");
                });

            modelBuilder.Entity("CRAFTHER.Backend.Models.Quest", b =>
                {
                    b.HasOne("CRAFTHER.Backend.Models.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId");

                    b.HasOne("CRAFTHER.Backend.Models.QuestType", "QuestType")
                        .WithMany()
                        .HasForeignKey("QuestTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");

                    b.Navigation("QuestType");
                });

            modelBuilder.Entity("CRAFTHER.Backend.Models.StockAdjustment", b =>
                {
                    b.HasOne("CRAFTHER.Backend.Models.StockAdjustmentType", "AdjustmentType")
                        .WithMany()
                        .HasForeignKey("AdjustmentTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CRAFTHER.Backend.Models.Component", "Component")
                        .WithMany()
                        .HasForeignKey("ComponentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CRAFTHER.Backend.Models.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CRAFTHER.Backend.Models.UnitOfMeasure", "UnitOfMeasure")
                        .WithMany()
                        .HasForeignKey("UnitOfMeasureId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AdjustmentType");

                    b.Navigation("Component");

                    b.Navigation("Organization");

                    b.Navigation("UnitOfMeasure");
                });

            modelBuilder.Entity("CRAFTHER.Backend.Models.UnitConversion", b =>
                {
                    b.HasOne("CRAFTHER.Backend.Models.UnitOfMeasure", "FromUnit")
                        .WithMany()
                        .HasForeignKey("FromUnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CRAFTHER.Backend.Models.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CRAFTHER.Backend.Models.UnitOfMeasure", "ToUnit")
                        .WithMany()
                        .HasForeignKey("ToUnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FromUnit");

                    b.Navigation("Organization");

                    b.Navigation("ToUnit");
                });

            modelBuilder.Entity("CRAFTHER.Backend.Models.UnitOfMeasure", b =>
                {
                    b.HasOne("CRAFTHER.Backend.Models.UnitGroup", "UnitGroup")
                        .WithMany("UnitsOfMeasure")
                        .HasForeignKey("UnitGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UnitGroup");
                });

            modelBuilder.Entity("CRAFTHER.Backend.Models.UserQuest", b =>
                {
                    b.HasOne("CRAFTHER.Backend.Models.Quest", "Quest")
                        .WithMany()
                        .HasForeignKey("QuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CRAFTHER.Backend.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quest");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CRAFTHER.Backend.Models.UserScore", b =>
                {
                    b.HasOne("CRAFTHER.Backend.Models.Level", "Level")
                        .WithMany()
                        .HasForeignKey("LevelId");

                    b.HasOne("CRAFTHER.Backend.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Level");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("CRAFTHER.Backend.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("CRAFTHER.Backend.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("CRAFTHER.Backend.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("CRAFTHER.Backend.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CRAFTHER.Backend.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("CRAFTHER.Backend.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CRAFTHER.Backend.Models.Organization", b =>
                {
                    b.Navigation("Components");

                    b.Navigation("Products");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("CRAFTHER.Backend.Models.Product", b =>
                {
                    b.Navigation("BOMItems");

                    b.Navigation("SubProductBOMItems");
                });

            modelBuilder.Entity("CRAFTHER.Backend.Models.UnitGroup", b =>
                {
                    b.Navigation("UnitsOfMeasure");
                });
#pragma warning restore 612, 618
        }
    }
}
